# Generated by Django 5.1.7 on 2025-03-25 03:08

import analyzer.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('report_type', models.CharField(choices=[('weekly', 'Weekly'), ('monthly', 'Monthly'), ('custom', 'Custom')], max_length=20)),
                ('date_range_start', models.DateField()),
                ('date_range_end', models.DateField()),
                ('excel_file', models.FileField(blank=True, null=True, upload_to='reports')),
                ('agent_performance', models.JSONField(default=dict)),
                ('common_issues', models.JSONField(default=list)),
                ('trend_analysis', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=50, unique=True)),
                ('department', models.CharField(max_length=100)),
                ('hire_date', models.DateField()),
                ('avg_coverage_score', models.FloatField(default=0.0)),
                ('total_calls_handled', models.PositiveIntegerField(default=0)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='agent_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CallRecording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('file', models.FileField(upload_to=analyzer.models.get_upload_path)),
                ('customer_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('duration_seconds', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='call_recordings', to='analyzer.agent')),
            ],
        ),
        migrations.CreateModel(
            name='CallAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transcription_text', models.TextField()),
                ('agent_text', models.TextField()),
                ('customer_text', models.TextField()),
                ('coverage_score', models.FloatField(help_text='AI-generated score (0-10) of how well the agent handled the complaint', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('score_explanation', models.TextField(help_text='Explanation of the coverage score')),
                ('sentiment', models.CharField(choices=[('positive', 'Positive'), ('neutral', 'Neutral'), ('negative', 'Negative')], max_length=20)),
                ('confidence_score', models.FloatField(help_text='AI confidence in the analysis (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('key_issues', models.JSONField(default=list, help_text='List of key issues identified')),
                ('compliance_check', models.JSONField(default=dict, help_text='Compliance check results')),
                ('improvement_suggestions', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='call_analyses', to='analyzer.agent')),
                ('call_recording', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='analysis', to='analyzer.callrecording')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('query_text', models.TextField(help_text='Text-based customer query for the agent to respond to')),
                ('agent_response', models.TextField(blank=True, help_text="Agent's recorded response")),
                ('tone_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('clarity_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('accuracy_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('feedback', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_sessions', to='analyzer.agent')),
            ],
        ),
    ]
